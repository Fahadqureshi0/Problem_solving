"""Problem 1: Filter and Validate Matrix Rows
Statement:
You are given a 4×4 matrix. Check each row to ensure all values lie between 1 and 100.
Then, filter out the rows where the sum of the elements is less than 150.
Finally, return the valid and filtered rows sorted in descending order of their row sums.
"""

matrix = [
    [2,7,4,1],
    [9,5,3,8],
    [6,0,2,4],
    [1,8,7,3]
]

valid_filtered_rows = list(filter(lambda row: all(1<=x<=100 for x in row)and sum(row)<=150,matrix))
sorted_rows = sorted(valid_filtered_rows,key=lambda row: sum(row), reverse= True)
print(sorted_rows)



"""
Problem # 4
 Sorting Even Numbers in Matrix
Statement:
You are given a 3×3 matrix. First, validate that all numbers are even and between 2 and 100.
Extract all even numbers from the matrix and sort them in descending order.
Return the sorted list.

"""

matrix2 = [
    [2, 8, 4, 6],  
    [9, 5, 3, 8],  
    [6, 0, 2, 4]    
]

# Filter rows with all even numbers and in range 2-100
valid_even_numbers = list(filter(
    lambda row: all(2 <= x <= 100 and x % 2 == 0 for x in row),
    matrix2
))

# Sort rows by ascending row sum
sorted_rows = sorted(valid_even_numbers, key=lambda row: sum(row), reverse=True)
print(sorted_rows)



"""
 Problem 2: Diagonal Sort with Range Check
Statement:
You are given a 5×5 matrix. Validate that all elements lie between 0 and 50.
Then, extract both the primary and secondary diagonals.
Sort both diagonals separately in ascending order, and return the sorted lists.

"""
matrix = [
    [10, 2, 3, 4, 5],
    [6, 15, 8, 9, 10],
    [11, 12, 20, 14, 15],
    [16, 17, 18, 25, 20],
    [21, 22, 23, 24, 30]
]

# Step 1: Validate all elements are in 0–50
if all(0 <= x <= 50 for row in matrix for x in row):
    
    n = len(matrix)

    # Step 2: Extract primary and secondary diagonals
    primary_diag = [matrix[i][i] for i in range(n)]
    secondary_diag = [matrix[i][n - 1 - i] for i in range(n)]

    # Step 3: Sort both diagonals
    primary_sorted = sorted(primary_diag)
    secondary_sorted = sorted(secondary_diag)

    # Step 4: Return results
    print("Primary Diagonal Sorted:", primary_sorted)
    print("Secondary Diagonal Sorted:", secondary_sorted)

else:
    print("Matrix contains elements outside the range 0–50.")

"""
 Problem 3: Column Filter Based on Average
Statement:
Given a 4×4 matrix with integer values between 10 and 99, calculate the average of each column.
Filter out columns where the average is greater than 70.
Return the indices of the remaining columns, and their values sorted in ascending order.
"""

def filter_columns_by_average(matrix):
    n = len(matrix)  # Number of rows
    m = len(matrix[0])  # Number of columns

    # Transpose the matrix to get columns easily using zip
    transposed = list(zip(*matrix))

    # Using list comprehension to filter and process columns
    result = [
        (i, sorted(list(col)))
        for i, col in enumerate(transposed)
        if sum(col) / n <= 70
    ]

    # Separate indices and sorted column values
    indices = [i for i, col in result]
    sorted_columns = [col for i, col in result]

    return indices, sorted_columns


# Example 4x4 matrix (values between 10 and 99)
matrix = [
    [50, 80, 60, 72],
    [65, 75, 62, 90],
    [45, 92, 67, 85],
    [55, 88, 63, 70]
]

indices, columns = filter_columns_by_average(matrix)

print("Valid Column Indices:", indices)
print("Sorted Column Values:")
for col in columns:
    print(col)



"""
 Problem 5: Matrix Border Check and Filter
Statement:
Given a 6×6 matrix, validate that all border elements (first row, last row, first column, last column) are between 5 and 50.
Filter out all inner elements (non-border) that are less than 25.
Return a list of filtered inner elements sorted in ascending order.
"""


# Sample 6x6 matrix (can replace this with user input)
matrix = [
    [10, 20, 30, 40, 50, 45],
    [15, 60, 22, 24, 55, 35],
    [12, 26, 18, 20, 30, 25],
    [14, 29, 10, 23, 28, 22],
    [11, 33, 27, 21, 32, 40],
    [10, 20, 30, 40, 50, 35]
]

rows = len(matrix)
cols = len(matrix[0])

# Step 1: Validate border elements
border_valid = True
for i in range(rows):
    for j in range(cols):
        if i == 0 or i == rows - 1 or j == 0 or j == cols - 1:
            if not (5 <= matrix[i][j] <= 50):
                border_valid = False

if not border_valid:
    print("Invalid border elements found (not in range 5 to 50).")
else:
    # Step 2: Collect inner elements
    inner_elements = []
    for i in range(1, rows - 1):         # skip first and last row
        for j in range(1, cols - 1):     # skip first and last column
            if matrix[i][j] < 25:
                inner_elements.append(matrix[i][j])

    # Step 3: Sort the filtered inner elements
    sorted_inner = sorted(inner_elements)

    # Final Output
    print("Filtered and Sorted Inner Elements (<25):")
    print(sorted_inner)







"""
:small_blue_diamond: Problem 1: Row-wise Flatten with Validation
Statement:
You are given a 4×4 matrix. Validate that all values are between 0 and 100.
Then, convert the matrix into a single array by reading it row by row (left to right).
Return the flattened array.
"""

Matrix4 = [
    [20,80,90,70],
    [30,50,60,80],
    [10,20,30,40],
    [90,80,30,50]
]
flat = []
for row in Matrix4:
    for val in row:
        if 0<=val<=100:
            flat.append(val)
        else:
            raise ValueError("Invalid Error!")

print(flat)
        


"""
Problem 2: Column-wise Flatten
Statement:
Given a 3×3 matrix of integers, flatten it into a single array by reading it column by column (top to bottom).
Return the resulting array.
"""
Matrix3 = [
    [20,80,90,70],
    [30,50,60,80],
    [10,20,30,40]
]
flat1 = []

for col in range(3):
    for row in range(3):
        flat1.append(Matrix3[row][col])



print(flat1)



"""
Problem 3: Zigzag Row-wise Flatten
Statement:
You are given a 4×4 matrix. Flatten the matrix in a zigzag row-wise pattern:
	•	Row 0: left to right
	•	Row 1: right to left
	•	Row 2: left to right
	•	… and so on.
Return the resulting array.

"""
mat = [
    [1,2,3,4],
    [5,6,7,8],
    [9,8,7,6]
]
flat3 = []
for i, row in enumerate(mat):
    if i %2==0:
        flat3.extend(row)
    else:
        flat3.extend(row[::-1])
    

print(flat3)


"""
 Problem 5: Diagonal Flatten (Top-left to Bottom-right)
Statement:
You are given a 4×4 matrix. Extract and flatten the diagonals (top-left to bottom-right) of the matrix into a single array.
Start from the top-left element, move diagonally to the bottom-right.
Return the diagonal values as an array.
"""

matrix1 = [
    [20,80,90,70],
    [30,50,60,80],
    [10,20,30,40],
    [90,80,70,50]
]

flat = [matrix1[i][i] for i in range(4)]
print(flat)




matrix5 = [
     [20,80,90,70],
    [30,50,60,80],
    [10,20,30,40],
    [90,80,70,50]
]

flat = []
for col in range(4):
    if col  % 2 == 0:
        for row in range(4):
            flat.append(matrix5[row][col])
    
    else:
        for row in range(3,-1,-1):
            flat.append(matrix5[row][col])


print(flat)








# #  how to solve Diagonal Problems:
# a = int(input("Enter number of rows: "))
# b = int(input("Enter number of columns: "))
# m = []

# for i in range(a):
#     c = []
#     for j in range(b):
#         num = int(input("Enter number in pocket [" + str(i) + "][" + str(j) + "]: "))
#         c.append(num)
#     m.append(c)

# # Printing the matrix to verify
# print("Matrix is....")
# for i in range(a):
#     for j in range(b):
#         print(m[i][j],end= "")
#     print()
# suml = 0
# sumr =0
# for i in range(a):
#     for j in range(b):
#         if i==j:
#             suml= suml+m[i][j]
#         if i+j ==3-1:
#             sumr = sumr+m[i][j]   
# print("left Diagonal Sum", suml)
# print("Right Diagonal Sum",sumr)
